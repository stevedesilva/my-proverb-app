// Package server provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
	"net/http"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// NewProverb defines model for NewProverb.
type NewProverb struct {
	Name string  `json:"name"`
	Tag  *string `json:"tag,omitempty"`
}

// Proverb defines model for Proverb.
type Proverb struct {
	// Embedded struct due to allOf(#/components/schemas/NewProverb)
	NewProverb
	// Embedded fields due to inline allOf schema
	Id int64 `json:"id"`
}

// FindProverbsParams defines parameters for FindProverbs.
type FindProverbsParams struct {

	// tags to filter by
	Tags *[]string `json:"tags,omitempty"`

	// maximum number of results to return
	Limit *int32 `json:"limit,omitempty"`
}

// AddProverbJSONBody defines parameters for AddProverb.
type AddProverbJSONBody NewProverb

// AddProverbRequestBody defines body for AddProverb for application/json ContentType.
type AddProverbJSONRequestBody AddProverbJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /info)
	GetInformation(ctx echo.Context) error

	// (GET /proverbs)
	FindProverbs(ctx echo.Context, params FindProverbsParams) error

	// (POST /proverbs)
	AddProverb(ctx echo.Context) error

	// (DELETE /proverbs/{id})
	DeleteProverb(ctx echo.Context, id int64) error

	// (GET /proverbs/{id})
	FindProverbById(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) GetInformation(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInformation(ctx)
	return err
}

// FindProverbs converts echo context to params.
func (w *ServerInterfaceWrapper) FindProverbs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindProverbsParams
	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindProverbs(ctx, params)
	return err
}

// AddProverb converts echo context to params.
func (w *ServerInterfaceWrapper) AddProverb(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddProverb(ctx)
	return err
}

// DeleteProverb converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProverb(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteProverb(ctx, id)
	return err
}

// FindProverbById converts echo context to params.
func (w *ServerInterfaceWrapper) FindProverbById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindProverbById(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/info", wrapper.GetInformation)
	router.GET("/proverbs", wrapper.FindProverbs)
	router.POST("/proverbs", wrapper.AddProverb)
	router.DELETE("/proverbs/:id", wrapper.DeleteProverb)
	router.GET("/proverbs/:id", wrapper.FindProverbById)

}

